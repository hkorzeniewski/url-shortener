name: Django Tests

on:
  
  workflow_call:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  simple_build:
    runs-on: ubuntu-latest
    env:
      branch: ${{ github.ref }}
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        env:
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
            python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: |
          pip install poetry

      - name: Poetry config
        run: |
            poetry config virtualenvs.create false
      - name: Install requirements
        run: |
            poetry install --no-root
      - name: Run linters
        run: |
            make linters

      - name: Run tests
        env:
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          DJANGO_SECRET_KEY: random_key
          DEBUG: True
        run: |
            poetry run coverage run manage.py test
      - name: bumpversion
        run: |
            [ ${branch} = main ] && export PART=minor
            pip install bumpversion
            echo ${branch}
            echo ${PART}
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            bumpversion --message '[skip ci] Bump version: {current_version} â†’ {new_version}' --list --verbose ${PART}
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GIT_TOKEN }}
          branch: ${{ github.ref }}
          tags: true
          force: true
  ecr:
    runs-on: ubuntu-latest
    name: builr and deploy to AWS ECR
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set Tag Number
        id: tag-number
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Check Tag Release
        env:
          RELEASE_VERSION: ${{ steps.tag-number.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.vars.outputs.tag }}
        
#       - name: Build, tag, and push image to Amazon ECR
#         env:
#           ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
#           ECR_REPOSITORY: urlshortener
# #           IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
#           IMAGE_TAG: latest
#         run: |
#           docker build -t urlshortener .
#           docker tag urlshortener:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
